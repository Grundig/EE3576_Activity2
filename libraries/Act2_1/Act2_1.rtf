{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Consolas;}}
{\colortbl\red0\green128\blue0;\red0\green0\blue0;\red255\green0\blue0;\red0\green120\blue215;\red128\green0\blue128;\red0\green0\blue255;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title Act2_1.rtf}}

\deflang1033\pard\plain\f0\fs18 \cf0 #ifndef Act2_1_h
\par #define Act2_1_h
\par 
\par #include<Arduino.h>
\par #include<Basic_Input.h> 
\par #include<PushButton.h>
\par #include<IntervalCheckTimer.h>
\par #include<DCmotor.h>
\par #include<InterruptBasedSpeedMeasure.h>
\par #include<InterruptBasedInputs.h>
\par \cf1\b double\b0  RPM\cf2\b ;
\par \cf1 class\b0  Act2_1\cf2\b \{
\par \b0\cf1 	
\par 	\b protected\cf2 :
\par \b0\cf1 		
\par 		\cf3\i // Objects
\par \i0\cf1 		in_analog motor_potentiometer\cf2\b ;
\par \b0\cf1 		inputs motor_pushbuttons\cf2\b ;
\par \b0\cf1 		HBridgeDCmotor motor\cf2\b ;
\par \b0\cf1 		InterruptSpeedMeasure rotation_counter\cf2\b ;
\par \b0\cf1 		IntervalCheckTimer check_inp_time\cf2\b ;
\par \b0\cf1 		IntervalCheckTimer speed_check\cf2\b ;
\par \b0\cf1 		
\par 		\cf3\i // Values
\par \i0\cf1 		\b int\b0  map_min_val \cf2\b =\b0\cf1  \cf4 0\cf2\b ;
\par \b0\cf1 		\b int\b0  map_max_val \cf2\b =\b0\cf1  \cf4 100\cf2\b ;
\par \b0\cf1 		\b int\b0  speed_control_ms \cf2\b =\b0\cf1  \cf4 200\cf2\b ;\b0\cf1  
\par 		
\par 		\cf3\i // Enabled
\par \i0\cf1 		\b bool\b0  pushbuttons_enabled \cf2\b =\b0\cf1  \b false\cf2 ,\b0\cf1  potentiometer_enabled \cf2\b =\b0\cf1  \b false\cf2 ,\b0\cf1  time_enabled \cf2\b =\b0\cf1  \b false\cf2 ,\b0\cf1  motor_enabled \cf2\b =\b0\cf1  \b false\cf2 ,\b0\cf1  speed_enabled \cf2\b =\b0\cf1  \b false\cf2 ;
\par \b0\cf1 		\b bool\b0  enabled\cf2\b ;
\par \b0\cf1 		
\par 		
\par 	\b public\cf2 :
\par \b0\cf1 		
\par 		\cf3\i // Constructer, set to default
\par \i0\cf1 		Act2_1\cf2\b ()
\par \b0\cf1 		\cf2\b \{
\par \b0\cf1 			enabled \cf2\b =\b0\cf1  \b false\cf2 ;
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 		
\par 		\cf3\i // Check if system is fully set up
\par \i0\cf1 		\b bool\b0  isEnabled\cf2\b ()
\par \b0\cf1 		\cf2\b \{
\par \b0\cf1 			\cf3\i // All setups complete
\par \i0\cf1 			\b if\b0  \cf2\b (\b0\cf1 pushbuttons_enabled \cf2\b &&\b0\cf1  potentiometer_enabled \cf2\b &&\b0\cf1  time_enabled \cf2\b &&\b0\cf1  motor_enabled \cf2\b &&\b0\cf1  speed_enabled\cf2\b )
\par \b0\cf1 			\cf2\b \{
\par \b0\cf1 				enabled \cf2\b =\b0\cf1  \b true\cf2 ;
\par \b0\cf1 			\cf2\b \}
\par \b0\cf1 			
\par 			\b return\b0  enabled\cf2\b ;
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 		
\par 		\cf3\i // Set up all three pushbuttons
\par \i0\cf1 		\b void\b0  setup_pushbuttons\cf2\b (\cf1 int\b0  start_pin\cf2\b ,\b0\cf1  \b int\b0  stop_pin\cf2\b ,\b0\cf1  \b int\b0  reverse_pin\cf2\b )
\par \b0\cf1 		\cf2\b \{
\par \b0\cf1 			\b if\b0  \cf2\b (!\b0\cf1 isEnabled\cf2\b ())
\par \b0\cf1 			\cf2\b \{
\par \b0\cf1 				\cf3\i // Set long push
\par \i0\cf1 				\b unsigned\b0  \b long\b0  \b int\b0  mininterval_ms\cf2\b =\b0\cf4 2000\cf2\b ;
\par \b0\cf1 			
\par 				\cf3\i // Labelling and assigning each pin
\par \i0\cf1   				in_push_button start_but\cf2\b (\b0\cf1 start_pin\cf2\b ,\b0\cf1  start\cf2\b ,\b0\cf1  mininterval_ms\cf2\b );
\par \b0\cf1   				in_push_button stop_but\cf2\b (\b0\cf1 stop_pin\cf2\b ,\b0\cf1  stop\cf2\b ,\b0\cf1  mininterval_ms\cf2\b );
\par \b0\cf1   				in_push_button reverse_but\cf2\b (\b0\cf1 reverse_pin\cf2\b ,\b0\cf1  reverse\cf2\b ,\b0\cf1  mininterval_ms\cf2\b );
\par \b0\cf1   			
\par   				\cf3\i // Add push button into system
\par \i0\cf1   				motor_pushbuttons\cf2\b .\b0\cf1 add_in_push_button\cf2\b (\b0\cf1 start_but\cf2\b );
\par \b0\cf1  				motor_pushbuttons\cf2\b .\b0\cf1 add_in_push_button\cf2\b (\b0\cf1 stop_but\cf2\b );
\par \b0\cf1   				motor_pushbuttons\cf2\b .\b0\cf1 add_in_push_button\cf2\b (\b0\cf1 reverse_but\cf2\b );
\par \b0\cf1   			
\par   				pushbuttons_enabled \cf2\b =\b0\cf1  \b true\cf2 ;
\par \b0\cf1   			\cf2\b \}
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 		
\par 		
\par 		\cf3\i // Set up potentiometer
\par \i0\cf1 		\b void\b0  setup_potentiometer\cf2\b (\cf1 int\b0  analog_pin\cf2\b )
\par \b0\cf1 		\cf2\b \{
\par \b0\cf1 			\b if\cf2 (!\b0\cf1 isEnabled\cf2\b ())
\par \b0\cf1 			\cf2\b \{
\par \b0\cf1 				\cf3\i // setup potentiometer
\par \i0\cf1 				motor_potentiometer\cf2\b .\b0\cf1 setup_in_analog\cf2\b (\b0\cf1 analog_pin\cf2\b );
\par \b0\cf1 			
\par 				potentiometer_enabled \cf2\b =\b0\cf1  \b true\cf2 ;
\par \b0\cf1 			\cf2\b \}
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 		
\par 		\cf3\i // Assign the time between checks of input variables
\par \i0\cf1 		\b void\b0  set_time_between_input_checks\cf2\b (\cf1 int\b0  check_time\cf2\b )
\par \b0\cf1 		\cf2\b \{
\par \b0\cf1 			\b if\cf2 (!\b0\cf1 isEnabled\cf2\b ())
\par \b0\cf1 			\cf2\b \{
\par \b0\cf1 				\cf3\i //buttons
\par \i0\cf1   				check_inp_time\cf2\b .\b0\cf1 setInterCheck\cf2\b (\b0\cf1 check_time\cf2\b );
\par \b0\cf1   			
\par   				time_enabled \cf2\b =\b0\cf1  \b true\cf2 ;
\par \b0\cf1   			\cf2\b \}
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 		
\par 		
\par 		\cf3\i // Set up motor
\par \i0\cf1 		\b void\b0  setup_motor\cf2\b (\cf1 int\b0  motor_pin\cf2\b ,\b0\cf1  \b int\b0  direction_pin\cf2\b )
\par \b0\cf1 		\cf2\b \{
\par \b0\cf1 			\b if\cf2 (!\b0\cf1 isEnabled\cf2\b ())
\par \b0\cf1 			\cf2\b \{
\par \b0\cf1 				motor\cf2\b .\b0\cf1 setup_HBridgeDCmotor\cf2\b (\b0\cf1 motor_pin\cf2\b ,\b0\cf1  direction_pin\cf2\b );
\par \b0\cf1 			
\par 				motor_enabled \cf2\b =\b0\cf1  \b true\cf2 ;
\par \b0\cf1 			\cf2\b \}
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 		
\par 		\cf3\i // Set up hall effect sensor to measure speed
\par \i0\cf1 		\b void\b0  setup_speed_measure\cf2\b (\b0\cf1 ArduinoInterruptNames speed_pin\cf2\b )
\par \b0\cf1 		\cf2\b \{
\par \b0\cf1 			\b if\cf2 (!\b0\cf1 isEnabled\cf2\b ())
\par \b0\cf1 			\cf2\b \{
\par \b0\cf1 				rotation_counter\cf2\b .\b0\cf1 setupSpeedMeasure\cf2\b (\b0\cf1 speed_pin\cf2\b );
\par \b0\cf1 				
\par 				\cf3\i // Set time between speed measurements
\par \i0\cf1 				speed_check\cf2\b .\b0\cf1 setInterCheck\cf2\b (\b0\cf1 speed_control_ms\cf2\b );
\par \b0\cf1 				
\par 				speed_enabled \cf2\b =\b0\cf1  \b true\cf2 ;
\par \b0\cf1 			\cf2\b \}
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 		
\par 		\cf3\i // Determine motor command (start, stop, reverse) from pushbuttons
\par \i0\cf1 		\b void\b0  motor_direction\cf2\b (\b0\cf1 command_list_enum in_smpl_cmd\cf2\b )
\par \b0\cf1 		\cf2\b \{
\par \b0\cf1 			\b switch\b0  \cf2\b (\b0\cf1 in_smpl_cmd\cf2\b )
\par \b0\cf1 			\cf2\b \{
\par \b0\cf1         		\b case\b0  start\cf2\b :
\par \b0\cf1         		Serial\cf2\b .\b0\cf1 println\cf2\b (\cf5 " Start button pressed"\cf2 );
\par \b0\cf1         		motor\cf2\b .\b0\cf1 start\cf2\b ();
\par \b0\cf1         		\b break\cf2 ;
\par \b0\cf1         		
\par         		\b case\b0  stop\cf2\b :
\par \b0\cf1         		Serial\cf2\b .\b0\cf1 println\cf2\b (\cf5 "    Stop button pressed"\cf2 );\b0\cf1   
\par         		motor\cf2\b .\b0\cf1 stop\cf2\b ();
\par \b0\cf1         		\b break\cf2 ;
\par \b0\cf1         		
\par         		\b case\b0  reverse\cf2\b :
\par \b0\cf1         		Serial\cf2\b .\b0\cf1 println\cf2\b (\cf5 "        Reverse button pressed"\cf2 );
\par \b0\cf1         		motor\cf2\b .\b0\cf1 changedir\cf2\b ();
\par \b0\cf1         		\b break\cf2 ;
\par \b0\cf1         		
\par         		\b default\cf2 :
\par \b0\cf1           		Serial\cf2\b .\b0\cf1 println\cf2\b (\cf5 "Unknown button pressed"\cf2 );
\par \b0\cf1           		\b break\cf2 ;
\par \b0\cf1 			\cf2\b \}
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 		
\par 		\cf3\i // Set motor speed from potentiometer value
\par \i0\cf1 		\b void\b0  motor_speed\cf2\b (\cf1 int\b0  val\cf2\b )
\par \b0\cf1 		\cf2\b \{
\par \b0\cf1 			motor\cf2\b .\b0\cf1 setSpeedPWM\cf2\b (\b0\cf1 val\cf2\b );
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 		
\par 		\cf3\i // Read motor speed (rpm) from hall effect sensor
\par \i0\cf1 		\b void\b0  read_motor_speed\cf2\b ()
\par \b0\cf1 		\cf2\b \{
\par \b0\cf1 			RPM\cf2\b =\b0\cf1 rotation_counter\cf2\b .\b0\cf1 getRPMandUpdate\cf2\b ();
\par \b0\cf1     			\b if\cf2 (\b0\cf1 RPM\cf2\b >\b0\cf4 0\cf2\b )
\par \b0\cf1     			\cf2\b \{
\par \b0\cf1     				\cf3\i //Serial.print("revs per min = ");
\par \i0\cf1     				\cf3\i //Serial.println(RPM);
\par \i0\cf1     			\cf2\b \}
\par \b0\cf1     					
\par     			\b else
\par \b0     			\cf2\b \{
\par \b0\cf1     				\cf3\i //Serial.println("Reading speed failed");
\par \i0\cf1     			\cf2\b \}
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 		
\par 		\cf3\i // Execute the system task
\par \i0\cf1 		system_execute\cf2\b ()
\par \b0\cf1 		\cf2\b \{
\par \b0\cf1 			\b if\b0  \cf2\b (\b0\cf1 isEnabled\cf2\b ())
\par \b0\cf1 			\cf2\b \{
\par \b0\cf1 				\cf3\i // Check inputs 
\par \i0\cf1   				\b if\cf2 (\b0\cf1 check_inp_time\cf2\b .\b0\cf1 isMinChekTimeElapsedAndUpdate\cf2\b ())\b0\cf1  
\par   				\cf2\b \{
\par \b0\cf1   					command_list_enum in_smpl_cmd\cf2\b ;
\par \b0\cf1     				\b bool\b0  success_command\cf2\b ,\b0\cf1  success_val\cf2\b ;
\par \b0\cf1     				\b int\b0  val\cf2\b ,\b0\cf1  mapped_val\cf2\b ,\b0\cf1  plot_map\cf2\b ;
\par \b0\cf1   					
\par   					\cf3\i // Get motor command and potentiometer value
\par \i0\cf1   					success_command \cf2\b =\b0\cf1  motor_pushbuttons\cf2\b .\b0\cf1 check_n_get_command\cf2\b (\b0\cf1 in_smpl_cmd\cf2\b );
\par \b0\cf1   					success_val \cf2\b =\b0\cf1  motor_potentiometer\cf2\b .\b0\cf1 read_input\cf2\b (\b0\cf1 val\cf2\b );\b0\cf1  
\par   					
\par   					\cf3\i // Map potentiometer value
\par \i0\cf1   					mapped_val \cf2\b =\b0\cf1  map\cf2\b (\b0\cf1 val\cf2\b ,\b0\cf1  \cf4 0\cf2\b ,\b0\cf1  \cf4 1023\cf2\b ,\b0\cf1  map_min_val\cf2\b ,\b0\cf1  map_max_val\cf2\b );
\par \b0\cf1 					plot_map \cf2\b =\b0\cf1  map\cf2\b (\b0\cf1 val\cf2\b ,\b0\cf4 0\cf2\b ,\b0\cf4 1023\cf2\b ,\b0\cf4 0\cf2\b ,\b0\cf4 6000\cf2\b );
\par \b0\cf1 					\cf3\i // Output motor direction and speed
\par \i0\cf1 					\b if\cf2 (\b0\cf1 success_command\cf2\b )
\par \b0\cf1 					\cf2\b \{
\par \b0\cf1   						motor_direction\cf2\b (\b0\cf1 in_smpl_cmd\cf2\b );
\par \b0\cf1   					\cf2\b \}
\par \b0\cf1   					
\par   					\b if\cf2 (\b0\cf1 success_val\cf2\b )
\par \b0\cf1   					\cf2\b \{
\par \b0\cf1   						motor_speed\cf2\b (\b0\cf1 mapped_val\cf2\b );
\par \b0\cf1   					\cf2\b \}
\par \b0\cf1   					
\par   					\cf3\i // Display motor speed
\par \i0\cf1   					\b if\b0  \cf2\b (\b0\cf1 speed_check\cf2\b .\b0\cf1 isMinChekTimeElapsedAndUpdate\cf2\b ())
\par \b0\cf1   					\cf2\b \{
\par \b0\cf1   						read_motor_speed\cf2\b ();
\par \b0\cf1   						Serial\cf2\b .\b0\cf1 print\cf2\b (\b0\cf1 plot_map\cf2\b );
\par \b0\cf1   						Serial\cf2\b .\b0\cf1 print\cf2\b (\cf5 " "\cf2 );
\par \b0\cf1   						Serial\cf2\b .\b0\cf1 print\cf2\b (\b0\cf4 0\cf2\b );
\par \b0\cf1   						Serial\cf2\b .\b0\cf1 print\cf2\b (\cf5 " "\cf2 );
\par \b0\cf1 						Serial\cf2\b .\b0\cf1 print\cf2\b (\b0\cf4 6000\cf2\b );
\par \b0\cf1 						Serial\cf2\b .\b0\cf1 print\cf2\b (\cf5 " "\cf2 );
\par \b0\cf1 						Serial\cf2\b .\b0\cf1 println\cf2\b (\b0\cf1 RPM\cf2\b );
\par \b0\cf1   					\cf2\b \}
\par \b0\cf1   				\cf2\b \}
\par \b0\cf1   			\cf2\b \}
\par \b0\cf1 		\cf2\b \}
\par \};
\par 
\par 
\par \b0\cf0 #endif
\par }